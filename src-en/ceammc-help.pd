#N canvas 0 0 760 555 12;
#X text 30 50 General purpose Pd library used for work and education
purposes in centre of electroacoustic music of Moscow Conservatory
(CEAMMC) and ZIL-electro studio.;
#X obj 20 105 cnv 5 27 31 empty empty an 4 13 0 17 -262144 -49933 0;
#X obj 20 146 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 157 an.onset;
#X text 200 157 onset detector for arrays;
#X obj 30 184 an.onset~;
#X text 200 184 onset detector;
#X obj 30 211 an.pitchtrack~;
#X text 200 211 pitch tracker;
#X obj 20 238 cnv 5 59 31 empty empty array 4 13 0 17 -262144 -49933
0;
#X obj 20 279 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 290 array.bpm;
#X text 200 290 BPM calculator;
#X obj 30 317 array.copy;
#X text 200 317 copy samples from one array to another;
#X obj 30 344 array.do;
#X text 200 344 iterate and modify array content via side-chain;
#X obj 30 371 array.each;
#X text 200 371 process each array elements via side-chain;
#X obj 30 398 array.fill;
#X text 200 398 fill array with single value or pattern;
#X obj 30 425 array.hist;
#X text 200 425 calculates array histogram;
#X obj 30 452 array.mean;
#X text 200 452 calculates array arithmetic mean value;
#X obj 30 479 array.minmax;
#X text 200 479 find array min and max element value;
#X obj 30 506 array.plot~;
#X text 200 506 plot signal on specified array;
#X obj 30 533 array.resample;
#X text 200 533 array resampler;
#X obj 30 560 array.rms;
#X text 200 560 calculates root mean square value for array;
#X obj 30 587 array.set;
#X text 200 587 set array content from list;
#X obj 30 614 array.stddev;
#X text 200 614 calculates standard deviation for array values;
#X obj 30 641 array.stretch;
#X text 200 641 array time-stretch \, pitch-shift or rate-change;
#X obj 30 668 array.sum;
#X text 200 668 calculates sum of array elements;
#X obj 30 695 array.sum2;
#X text 200 695 calculates sum of squares of array elements;
#X obj 30 722 array.variance;
#X text 200 722 calculates variance of array values;
#X obj 30 749 array.vplay;
#X text 200 749 simple array player for using with vline~;
#X obj 30 776 array.window;
#X text 200 776 fill array with window;
#X obj 30 803 plot.geomspace~;
#X text 200 803 outputs numbers spaced evenly on a log scale (a geometric
progression);
#X obj 30 843 plot.hist~;
#X text 200 843 calculate and output signal histogram;
#X obj 30 870 plot.linspace~;
#X text 200 870 outputs numbers spaced evenly spaced over a specified
interval;
#X obj 30 910 plot.logspace~;
#X text 200 910 outputs numbers spaced evenly on a log scale;
#X obj 30 937 plot.response~;
#X text 200 937 output amp/phase freq response to impulse;
#X obj 20 964 cnv 5 48 31 empty empty base 4 13 0 17 -262144 -49933 0;
#X obj 20 1005 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1019 ui.link @title [function] @url function-help.pd;
#X text 200 1016 named function;
#X obj 30 1041 function.call;
#X text 200 1041 call named function;
#X obj 30 1068 gain~;
#X text 200 1068 multislot signal gain;
#X obj 30 1095 matrix~;
#X text 200 1095 signal routing matrix;
#X obj 30 1122 metro.pattern;
#X text 200 1122 metro with rhythmic patterns;
#X obj 30 1149 metro.random;
#X text 200 1149 metro random bang with specified range;
#X obj 30 1176 metro.seq;
#X text 200 1176 metro sequencer;
#X obj 30 1203 mix~;
#X text 200 1203 multislot signal mixer;
#X obj 30 1230 nsig~;
#X text 200 1230 Mulitchannel converter from control to audio rate;
#X obj 30 1257 obj.props;
#X text 200 1257 property extractor;
#X obj 30 1284 radio;
#X text 200 1284 float index to outlet values as radio switch;
#X obj 30 1311 window;
#X text 200 1311 returns window value by given window position;
#X obj 30 1338 xdac~;
#X text 200 1338 dac~ with channel ranges;
#X obj 30 1365 xfade2~;
#X text 200 1365 multi stereo-signal crossfade;
#X obj 30 1392 xfade~;
#X text 200 1392 multi signal crossfade;
#X obj 20 1419 cnv 5 57 31 empty empty chaos 4 13 0 17 -262144 -49933
0;
#X obj 20 1460 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1471 chaos.gbman0;
#X text 200 1471 Gingerbreadman map chaotic generator;
#X obj 30 1498 chaos.gbman0~;
#X text 200 1498 Gingerbreadman map chaotic generator;
#X obj 30 1525 chaos.jong;
#X text 200 1525 Peter de Jong attractor;
#X obj 30 1552 chaos.logistic;
#X text 200 1552 Logistic map chaotic generator;
#X obj 30 1579 chaos.std0;
#X text 200 1579 Standard map chaotic generator;
#X obj 30 1606 chaos.std0~;
#X text 200 1606 Standard map chaotic generator;
#X obj 20 1633 cnv 5 48 31 empty empty conv 4 13 0 17 -262144 -49933
0;
#X obj 20 1674 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 1685 array.p2s;
#X text 200 1685 convert array phase [0\..1] to sample position;
#X obj 30 1712 array.s2p;
#X text 200 1712 convert array sample position to relative phase position
[0\..1];
#X obj 30 1752 conv.amp2dbfs;
#X text 200 1752 convert from amplitude to decibel full scale;
#X obj 30 1779 conv.amp2dbfs~;
#X text 200 1779 convert from amplitude to decibel full scale;
#X obj 30 1806 conv.bpm2hz;
#X text 200 1806 converts BPM to frequency in herz;
#X obj 30 1833 conv.bpm2ms;
#X text 200 1833 convert frequency in BPM to period in milliseconds;
#X obj 30 1860 conv.bpm2sec;
#X text 200 1860 convert frequency in BPM to period in seconds;
#X obj 30 1887 conv.car2pol;
#X text 200 1887 convert cartesian coords to polar;
#X obj 30 1914 conv.cc2amp;
#X text 200 1914 convert from MIDI Control Change range;
#X obj 30 1941 conv.dbfs2amp;
#X text 200 1941 convert decibel full scale to amplitude;
#X obj 30 1968 conv.lin2curve;
#X text 200 1968 map linear to exponential range with 0 allowed.;
#X obj 30 1995 conv.lin2exp;
#X text 200 1995 maps linear range to exponential range;
#X obj 30 2022 conv.lin2lin;
#X text 200 2022 convert from one linear range to another;
#X obj 30 2049 conv.lin2lin~;
#X text 200 2049 convert from one linear range to another for signals;
#X obj 30 2076 conv.list2props;
#X text 200 2076 converts list to series of property messages;
#X obj 30 2103 conv.midi2freq;
#X text 200 2103 convert from midi pitch to frequency in hz (with various
base A and temperament);
#X obj 30 2143 conv.ms2samp;
#X text 200 2143 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2183 conv.ms2samp~;
#X text 200 2183 convert time in milliseconds to number of samples
according to current samplerate;
#X obj 30 2223 conv.phase2rad;
#X text 200 2223 convert phase value [0-1] to radians [0-2π];
#X obj 30 2250 conv.phase2rad~;
#X text 200 2250 convert phase value [0-1] to radians [0-2π];
#X obj 30 2277 conv.pitch2midi;
#X text 200 2277 converts symbol pitch name to MIDI note number;
#X obj 30 2304 conv.pol2car;
#X text 200 2304 convert from polar coordinates to cartesian;
#X obj 30 2331 conv.rad2phase;
#X text 200 2331 convert radians value to phase;
#X obj 30 2358 conv.rad2phase~;
#X text 200 2358 convert radians value to phase;
#X obj 30 2385 conv.samp2ms;
#X text 200 2385 convert samples to time according to samplerate;
#X obj 30 2412 conv.samp2ms~;
#X text 200 2412 convert samples to milliseconds according to samplerate;
#X obj 30 2439 conv.samp2sec;
#X text 200 2439 convert samples to time according to samplerate;
#X obj 30 2466 conv.sec2samp;
#X text 200 2466 convert time in seconds to number of samples according
to current samplerate;
#X obj 30 2506 conv.sec2str;
#X text 200 2506 converts float time in seconds to formated symbol
(or string);
#X obj 30 2533 conv.str2sec;
#X text 200 2533 converts formatted time to float value in seconds;
#X obj 20 2560 cnv 5 48 31 empty empty data 4 13 0 17 -262144 -49933
0;
#X obj 20 2601 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 2612 data.dict;
#X text 200 2612 dictionary container: store values by key;
#X obj 30 2639 data.fifo;
#X text 200 2639 First-In-First-Out (FIFO) queue data container;
#X obj 30 2666 data.float;
#X text 200 2666 robust float object;
#X obj 30 2693 data.int;
#X text 200 2693 robust int object;
#X obj 30 2720 data.list;
#X text 200 2720 list container;
#X obj 30 2747 data.mlist;
#X text 200 2747 multidimensional list container;
#X obj 30 2774 data.set;
#X text 200 2774 container that store unique elements;
#X obj 30 2801 data.set2list;
#X text 200 2801 converts set to list;
#X obj 30 2828 dict.contains;
#X text 200 2828 predicate to check if dict contains a keys;
#X obj 30 2855 dict.each;
#X text 200 2855 map each value in dict;
#X obj 30 2882 dict.from_list;
#X text 200 2882 creates dictionary from list;
#X obj 30 2909 dict.get;
#X text 200 2909 output dict values;
#X obj 30 2936 dict.keys;
#X text 200 2936 get list of dict keys;
#X obj 30 2963 dict.pass;
#X text 200 2963 passes specified keys in dict;
#X obj 30 2990 dict.reject;
#X text 200 2990 rejects specified keys from dict;
#X obj 30 3017 dict.size;
#X text 200 3017 dictionary size;
#X obj 30 3044 dict.to_list;
#X text 200 3044 converts dictionary to plain list;
#X obj 30 3071 dict.values;
#X text 200 3071 dictionary values as mlist;
#X obj 30 3098 mlist.flatten;
#X text 200 3098 flatten nested mlist;
#X obj 30 3125 set.contains;
#X text 200 3125 check if specified element is in set;
#X obj 30 3152 set.diff;
#X text 200 3152 difference between two sets;
#X obj 30 3179 set.equal;
#X text 200 3179 checks if two sets are equal (contains same elements);
#X obj 30 3206 set.intersect;
#X text 200 3206 output intersection of given sets;
#X obj 30 3233 set.size;
#X text 200 3233 get number of elements in set;
#X obj 30 3260 set.symdiff;
#X text 200 3260 symmetric difference between two sets;
#X obj 30 3287 set.union;
#X text 200 3287 output union of given sets;
#X obj 20 3314 cnv 5 38 31 empty empty dyn 4 13 0 17 -262144 -49933 0;
#X obj 20 3355 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3366 dyn.comp2~;
#X text 200 3366 stereo dynamic range compressor;
#X obj 30 3393 dyn.comp~;
#X text 200 3393 mono dynamic range compressors;
#X obj 30 3420 dyn.gate2~;
#X text 200 3420 stereo signal gate;
#X obj 30 3447 dyn.gate~;
#X text 200 3447 mono signal gate;
#X obj 30 3474 dyn.limit2~;
#X text 200 3474 stereo 1176LN Peak Limiter;
#X obj 30 3501 dyn.limit~;
#X text 200 3501 mono 1176LN Peak Limiter;
#X obj 30 3528 dyn.softclip~;
#X text 200 3528 soft signal clip;
#X obj 20 3555 cnv 5 38 31 empty empty env 4 13 0 17 -262144 -49933 0;
#X obj 20 3596 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 3607 env.adsr~;
#X text 200 3607 ADSR (Attack \, Decay \, Sustain \, Release) envelope
generator;
#X obj 30 3634 env.ar~;
#X text 200 3634 Attack/Release envelope generator;
#X obj 30 3661 env.asr~;
#X text 200 3661 Attack/Sustain/Release envelope generator;
#X obj 30 3688 env.concat;
#X text 200 3688 Envelope concatenation;
#X obj 30 3715 env.follow~;
#X text 200 3715 Envelope follower with independent attack and release
times;
#X obj 30 3742 env.mix;
#X text 200 3742 Mix between two envelopes. Envelopes should contain
equal number of segments;
#X obj 30 3782 env.smooth~;
#X text 200 3782 An envelope with an exponential attack and release;
#X obj 30 3809 env.tscale;
#X text 200 3809 Envelope time-scale;
#X obj 30 3836 env.tshift;
#X text 200 3836 Envelope time-shift (horizontal);
#X obj 30 3863 env.vscale;
#X text 200 3863 Envelope value-scale;
#X obj 30 3890 env2array;
#X text 200 3890 Renders envelope to specified array;
#X obj 30 3917 env2vline;
#X text 200 3917 Converts envelope to bunch of vline messages;
#X obj 30 3944 envelope;
#X text 200 3944 Envelope data type;
#X obj 30 3971 vline2env;
#X text 200 3971 Converts vline messages to env;
#X obj 20 3998 cnv 5 49 31 empty empty flow 4 13 0 17 -262144 -49933
0;
#X obj 20 4039 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4050 expand_env;
#X text 200 4050 Substitute enviroment variables in data stream;
#X obj 30 4077 flow.append;
#X text 200 4077 inject message into flow;
#X obj 30 4104 flow.change;
#X text 200 4104 rejects redundant input values;
#X obj 30 4131 flow.count;
#X text 200 4131 control flow event counter;
#X obj 30 4158 flow.demultiplex;
#X text 200 4158 control flow demultiplexer;
#X obj 30 4185 flow.demultiplex2~;
#X text 200 4185 audio stream stereo demultiplexer;
#X obj 30 4212 flow.demultiplex~;
#X text 200 4212 audio stream demultiplexer;
#X obj 30 4239 flow.gate;
#X text 200 4239 control flow gate. [spigot] analog;
#X obj 30 4266 flow.greater;
#X text 200 4266 numeric stream router;
#X obj 30 4293 flow.group;
#X text 200 4293 group data atoms in list of specified size;
#X obj 30 4320 flow.interval;
#X text 200 4320 measure time between flow events;
#X obj 30 4347 flow.less;
#X text 200 4347 numeric stream router \, like many [moses];
#X obj 30 4374 flow.less_eq;
#X text 200 4374 numeric stream router \, like many [moses];
#X obj 30 4401 flow.match;
#X text 200 4401 route data flow by regexp match;
#X obj 30 4428 flow.multiplex;
#X text 200 4428 control flow multiplexer;
#X obj 30 4455 flow.multiplex2~;
#X text 200 4455 audio stream stereo multiplexer;
#X obj 30 4482 flow.multiplex~;
#X text 200 4482 audio stream multiplexer;
#X obj 30 4509 flow.once;
#X text 200 4509 one message pass thru;
#X obj 30 4536 flow.pack;
#X text 200 4536 flow pack;
#X obj 30 4563 flow.pass;
#X text 200 4563 pass specified values;
#X obj 30 4590 flow.pass_if;
#X text 200 4590 pass values that accepted by predicate object;
#X obj 30 4617 flow.reject;
#X text 200 4617 reject specified values;
#X obj 30 4644 flow.reject_if;
#X text 200 4644 reject values by predicate;
#X obj 30 4671 flow.route;
#X text 200 4671 advanced message router;
#X obj 30 4698 flow.speedlim;
#X text 200 4698 control stream speed limiter;
#X obj 30 4725 flow.split;
#X text 200 4725 split data flow by external side-chain predicate;
#X obj 30 4752 flow.sync;
#X text 200 4752 bus with only hot inlets;
#X obj 30 4779 flow.sync_pack;
#X text 200 4779 flow pack with all hot inlets;
#X obj 30 4806 flow.tee~;
#X text 200 4806 separate audio and control streams;
#X obj 30 4833 replace;
#X text 200 4833 Replace atoms in data stream;
#X obj 20 4860 cnv 5 37 31 empty empty flt 4 13 0 17 -262144 -49933 0;
#X obj 20 4901 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 4912 flt.biquad~;
#X text 200 4912 second order IIR filter.;
#X obj 30 4939 flt.bpf12~;
#X text 200 4939 Two pole band-pass butterworth filter;
#X obj 30 4966 flt.bpf24~;
#X text 200 4966 Four pole band-pass butterworth filter;
#X obj 30 4993 flt.c_bpf~;
#X text 200 4993 BPF coefficient calculator for biquad filter;
#X obj 30 5020 flt.c_highshelf~;
#X text 200 5020 Highshelf filter coefficient calculator for biquad;
#X obj 30 5047 flt.c_hpf~;
#X text 200 5047 HPF coefficient calculator for biquad filter;
#X obj 30 5074 flt.c_lowshelf~;
#X text 200 5074 Lowshelf filter coefficient calculator for biquad;
#X obj 30 5101 flt.c_lpf~;
#X text 200 5101 LPF coefficient calculator for biquad filter;
#X obj 30 5128 flt.c_notch~;
#X text 200 5128 Band-reject coefficient calculator for biquad filter;
#X obj 30 5155 flt.c_peak~;
#X text 200 5155 Peaking equalizer calculator for biquad;
#X obj 30 5182 flt.dcblock2~;
#X text 200 5182 stereo DC blocker;
#X obj 30 5209 flt.dcblock~;
#X text 200 5209 mono DC blocker;
#X obj 30 5236 flt.eq10~;
#X text 200 5236 graphic 10 band equalizer;
#X obj 30 5263 flt.eq_peak_cq~;
#X text 200 5263 constant-Q second order peaking equalizer section;
#X obj 30 5290 flt.eq_peak~;
#X text 200 5290 second order "peaking equalizer" section (gain boost
or cut near some frequency). Also called a "parametric equalizer" section.;
#X obj 30 5345 flt.freqz~;
#X text 200 5345 compute the frequency response of a digital filter;
#X obj 30 5372 flt.highshelf~;
#X text 200 5372 gain boost|cut above some frequency;
#X obj 30 5399 flt.hpf12~;
#X text 200 5399 High-pass second order Butterworth filter;
#X obj 30 5426 flt.hpf24~;
#X text 200 5426 High-pass fourth order Butterworth filter;
#X obj 30 5453 flt.lowshelf~;
#X text 200 5453 gain boost|cut below some frequency;
#X obj 30 5480 flt.lpf12~;
#X text 200 5480 Low-pass second order Butterworth filter;
#X obj 30 5507 flt.lpf24~;
#X text 200 5507 Low-pass fourth order Butterworth filter;
#X obj 30 5534 flt.median;
#X text 200 5534 Median control flow filter;
#X obj 30 5561 flt.moog_vcf~;
#X text 200 5561 Moog Voltage Controlled Filter;
#X obj 30 5588 flt.notch~;
#X text 200 5588 band-rejection filter;
#X obj 30 5615 flt.resonbp~;
#X text 200 5615 Simple resonant bandpass filter;
#X obj 20 5642 cnv 5 28 31 empty empty fx 4 13 0 17 -262144 -49933 0;
#X obj 20 5683 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 5694 fx.bitdown~;
#X text 200 5694 bit downer and downsampler effect;
#X obj 30 5721 fx.chorus~;
#X text 200 5721 Chorus effect;
#X obj 30 5748 fx.distortion1~;
#X text 200 5748 distortion #1 from Guitarix effects set;
#X obj 30 5775 fx.distortion2~;
#X text 200 5775 distortion #2 from Guitarix effects set;
#X obj 30 5802 fx.distortion3~;
#X text 200 5802 simple distortion #3 from Guitarix effects set;
#X obj 30 5829 fx.distortion~;
#X text 200 5829 cubic nonlinearity distortion;
#X obj 30 5856 fx.drive~;
#X text 200 5856 Guitarix drive effect;
#X obj 30 5883 fx.drone_box~;
#X text 200 5883 mono sympathetic resonance generator;
#X obj 30 5910 fx.echo~;
#X text 200 5910 simple echo effect;
#X obj 30 5937 fx.flanger~;
#X text 200 5937 mono flanging effect;
#X obj 30 5964 fx.freeverb2~;
#X text 200 5964 freeverb2 - stereo version of freeverb;
#X obj 30 5991 fx.freeverb~;
#X text 200 5991 freeverb - common used open-source reverb;
#X obj 30 6018 fx.freqshift~;
#X text 200 6018 frequency shifter or single-sideband ring modulation;
#X obj 30 6045 fx.granulator~;
#X text 200 6045 simple input stream granulator;
#X obj 30 6072 fx.greyhole~;
#X text 200 6072 A complex echo-like effect;
#X obj 30 6099 fx.looper~;
#X text 200 6099 One track looper;
#X obj 30 6126 fx.pitchshift~;
#X text 200 6126 simple pitch shifter based on 2 delay lines;
#X obj 30 6153 fx.sdelay~;
#X text 200 6153 smooth delay with a feedback control;
#X obj 30 6180 fx.vocoder~;
#X text 200 6180 very simple vocoder where the spectrum of the modulation
signal is analyzed using a 32-band filter bank;
#X obj 30 6220 fx.wahwah~;
#X text 200 6220 digitized CryBaby wah pedal;
#X obj 30 6247 fx.zita_rev1~;
#X text 200 6247 Zita stereo reverb;
#X obj 20 6274 cnv 5 69 31 empty empty global 4 13 0 17 -262144 -49933
0;
#X obj 20 6315 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6326 global.dict;
#X text 200 6326 global named dict object;
#X obj 30 6353 global.float;
#X text 200 6353 global named float object;
#X obj 30 6380 global.int;
#X text 200 6380 global named integer object;
#X obj 30 6407 global.list;
#X text 200 6407 global named list object;
#X obj 30 6434 global.mlist;
#X text 200 6434 global named mlist object;
#X obj 30 6461 global.set;
#X text 200 6461 global named set object;
#X obj 20 6488 cnv 5 28 31 empty empty hw 4 13 0 17 -262144 -49933 0;
#X obj 20 6529 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6540 hw.apple_smc;
#X text 200 6540 query the system management control in Apples;
#X obj 30 6567 hw.apple_sms;
#X text 200 6567 query the sudden motion sensor in Apples;
#X obj 30 6594 hw.arduino;
#X text 200 6594 Arduino device;
#X obj 30 6621 hw.cpu_temp;
#X text 200 6621 get CPU temperature;
#X obj 30 6648 hw.display;
#X text 200 6648 get/set display properties;
#X obj 30 6675 hw.kbd_light;
#X text 200 6675 Get/set keyboard light on some devices;
#X obj 20 6702 cnv 5 37 31 empty empty lfo 4 13 0 17 -262144 -49933 0;
#X obj 20 6743 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 6754 lfo.+pulse~;
#X text 200 6754 Unit-amplitude nonnegative low frequency pulse train;
#X obj 30 6781 lfo.+saw~;
#X text 200 6781 Positive unit-amplitude low frequency saw wave;
#X obj 30 6808 lfo.+square~;
#X text 200 6808 Positive low frequency square wave;
#X obj 30 6835 lfo.+tri~;
#X text 200 6835 Positive unit-amplitude low frequency triangle wave;
#X obj 30 6862 lfo.impulse~;
#X text 200 6862 Unit-amplitude low-frequency impulse train;
#X obj 30 6889 lfo.pulse~;
#X text 200 6889 Full-range unit-amplitude low frequency pulse train;
#X obj 30 6916 lfo.saw~;
#X text 200 6916 Full-range unit-amplitude low frequency saw;
#X obj 30 6943 lfo.square~;
#X text 200 6943 Zero-mean unit-amplitude low frequency square wave;
#X obj 30 6970 lfo.tri~;
#X text 200 6970 Zero-mean unit-amplitude low frequency triangle wave;
#X obj 20 6997 cnv 5 47 31 empty empty list 4 13 0 17 -262144 -49933
0;
#X obj 20 7038 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 7049 list.^at;
#X text 200 7049 on input index(es) outputs list element(s);
#X obj 30 7076 list.^contains;
#X text 200 7076 on input atom or list checks if specified list contains
it;
#X obj 30 7103 list.^search;
#X text 200 7103 on input atom returns it index in list;
#X obj 30 7130 list.all_of;
#X text 200 7130 checks if all list atoms accepted by predicate;
#X obj 30 7157 list.any_of;
#X text 200 7157 checks if at least one list element is accepted by
predicate;
#X obj 30 7184 list.append;
#X text 200 7184 append atom or list to the end of input list;
#X obj 30 7211 list.apply_to;
#X text 200 7211 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 7251 list.at;
#X text 200 7251 on input list outputs element(s) at specified index(es);
#X obj 30 7278 list.choice;
#X text 200 7278 returns random element from list;
#X obj 30 7305 list.contains;
#X text 200 7305 checks if input list contains specified atoms;
#X obj 30 7332 list.count;
#X text 200 7332 returns the number of items that equal to specified
value;
#X obj 30 7359 list.count_if;
#X text 200 7359 returns the number of items that satisfy to external
predicate.;
#X obj 30 7399 list.delta;
#X text 200 7399 returns the difference between the current list of
floats and the previous one.;
#X obj 30 7439 list.distribution;
#X text 200 7439 list value distribution;
#X obj 30 7466 list.do;
#X text 200 7466 iterate and modify list contents via side-chain;
#X obj 30 7493 list.each;
#X text 200 7493 maps each list value via external object(s);
#X obj 30 7520 list.enumerate;
#X text 200 7520 enumerates input list;
#X obj 30 7547 list.equal;
#X text 200 7547 checks if given lists are equal;
#X obj 30 7574 list.first;
#X text 200 7574 returns first list element;
#X obj 30 7601 list.gen;
#X text 200 7601 generates list of specified length via external generator;
#X obj 30 7628 list.histogram;
#X text 200 7628 outputs distribution histogram;
#X obj 30 7655 list.insert;
#X text 200 7655 insert atom or list to the specified position of input
list;
#X obj 30 7682 list.integrator;
#X text 200 7682 returns the sum of the previously stored list and
the current one then stores this sum;
#X obj 30 7722 list.last;
#X text 200 7722 returns last list element;
#X obj 30 7749 list.length;
#X text 200 7749 returns the number of atoms in the list;
#X obj 30 7776 list.max;
#X text 200 7776 returns largest element in the list;
#X obj 30 7803 list.mean;
#X text 200 7803 calculates average of list of floats;
#X obj 30 7830 list.min;
#X text 200 7830 returns smallest element in the list;
#X obj 30 7857 list.none_of;
#X text 200 7857 checks if none of list atoms is accepted by predicate;
#X obj 30 7884 list.normalize;
#X text 200 7884 normalizes float list values to get their sum = 1.0;
#X obj 30 7911 list.pass_if;
#X text 200 7911 leave only elements accepted by predicate;
#X obj 30 7938 list.prepend;
#X text 200 7938 prepend atom or list before input list;
#X obj 30 7965 list.product;
#X text 200 7965 calculates product of floats in list;
#X obj 30 7992 list.range;
#X text 200 7992 returns list smallest and largest value;
#X obj 30 8019 list.reduce;
#X text 200 8019 apply function of two arguments cumulatively to the
list;
#X obj 30 8046 list.remove;
#X text 200 8046 on input list remove element(s) at specified positions;
#X obj 30 8073 list.remove_if;
#X text 200 8073 remove elements by predicate;
#X obj 30 8100 list.repack;
#X text 200 8100 repack input list to specified size;
#X obj 30 8127 list.repeat;
#X text 200 8127 creates new list by repeating given list specified
times;
#X obj 30 8154 list.resample;
#X text 200 8154 resample list with specified ratio;
#X obj 30 8181 list.resize;
#X text 200 8181 changes list size;
#X obj 30 8208 list.reverse;
#X text 200 8208 reverses the order of the elements in the list;
#X obj 30 8235 list.rldecode;
#X text 200 8235 Run-length list decoder (RLE);
#X obj 30 8262 list.rlencode;
#X text 200 8262 RLE (run-length encoding) for lists;
#X obj 30 8289 list.rotate;
#X text 200 8289 rotates list;
#X obj 30 8316 list.route;
#X text 200 8316 acts like [route] but for lists;
#X obj 30 8343 list.search;
#X text 200 8343 search specified items in input list;
#X obj 30 8370 list.separate;
#X text 200 8370 sends list elements one by one separately;
#X obj 30 8397 list.seq;
#X text 200 8397 numeric sequence list generator;
#X obj 30 8424 list.set;
#X text 200 8424 on input list set value at specified position;
#X obj 30 8451 list.shift;
#X text 200 8451 shifts the contents of the list with linear interpolation;
#X obj 30 8478 list.shuffle;
#X text 200 8478 randomly rearranges elements in list;
#X obj 30 8505 list.slice;
#X text 200 8505 extract sublist;
#X obj 30 8532 list.sort;
#X text 200 8532 sorts list values by ascending order;
#X obj 30 8559 list.sort_with;
#X text 200 8559 sort list with user defined side-chain;
#X obj 30 8586 list.split;
#X text 200 8586 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 8626 list.stretch;
#X text 200 8626 stretches list - changes its size with linear interpolation;
#X obj 30 8653 list.sum;
#X text 200 8653 calculates sum of floats in list;
#X obj 30 8680 list.unique;
#X text 200 8680 removes duplicates from input list;
#X obj 30 8707 list.unpack;
#X text 200 8707 unpack list elements to separate outlets;
#X obj 30 8734 list.unzip;
#X text 200 8734 splits list to N lists \, each to separate output;
#X obj 30 8761 list.walk;
#X text 200 8761 Walks thru the list;
#X obj 30 8788 list.zip;
#X text 200 8788 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 20 8843 cnv 5 48 31 empty empty live 4 13 0 17 -262144 -49933
0;
#X obj 20 8884 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8895 live.capture~;
#X text 200 8895 record up to 32s of sound and playback the recorded
sound in loop;
#X obj 20 8935 cnv 5 58 31 empty empty local 4 13 0 17 -262144 -49933
0;
#X obj 20 8976 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 8987 local.dict;
#X text 200 8987 local named dict object;
#X obj 30 9014 local.float;
#X text 200 9014 canvas-scoped named float variable;
#X obj 30 9041 local.int;
#X text 200 9041 canvas-scoped named integer variable;
#X obj 30 9068 local.list;
#X text 200 9068 local named list object;
#X obj 30 9095 local.mlist;
#X text 200 9095 local named mlist object;
#X obj 30 9122 local.set;
#X text 200 9122 local named set object;
#X obj 20 9149 cnv 5 48 31 empty empty math 4 13 0 17 -262144 -49933
0;
#X obj 20 9190 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 9201 math.abs;
#X text 200 9201 absolute value function;
#X obj 30 9228 math.abs~;
#X text 200 9228 absolute value function for signals;
#X obj 30 9255 math.acos;
#X text 200 9255 arc cosine function;
#X obj 30 9282 math.acosh;
#X text 200 9282 inverse hyperbolic cosine function;
#X obj 30 9309 math.acosh~;
#X text 200 9309 hyperbolic arc cosine for signals;
#X obj 30 9336 math.acos~;
#X text 200 9336 arc cosine function for signals;
#X obj 30 9363 math.and;
#X text 200 9363 operation AND for multiple arguments;
#X obj 30 9390 math.approx;
#X text 200 9390 check if input value approximately equal to pattern;
#X obj 30 9417 math.asin;
#X text 200 9417 arc sine function;
#X obj 30 9444 math.asinh;
#X text 200 9444 inverse hyperbolic sine function;
#X obj 30 9471 math.asinh~;
#X text 200 9471 hyperbolic arc sine for signals;
#X obj 30 9498 math.asin~;
#X text 200 9498 arc sine for signals;
#X obj 30 9525 math.atan;
#X text 200 9525 arc tangent function;
#X obj 30 9552 math.atanh;
#X text 200 9552 inverse hyperbolic tangent function;
#X obj 30 9579 math.atanh~;
#X text 200 9579 hyperbolic arc tangent for signals;
#X obj 30 9606 math.atan~;
#X text 200 9606 arc tangent for signals;
#X obj 30 9633 math.cabs~;
#X text 200 9633 magnitude of a complex signals;
#X obj 30 9660 math.carg~;
#X text 200 9660 phase angle of a complex signals;
#X obj 30 9687 math.cbrt;
#X text 200 9687 cube root function;
#X obj 30 9714 math.cbrt~;
#X text 200 9714 cube root function for signals;
#X obj 30 9741 math.cdiv~;
#X text 200 9741 division of complex signals;
#X obj 30 9768 math.ceil;
#X text 200 9768 round to smallest integral value not less than input
value;
#X obj 30 9795 math.ceil~;
#X text 200 9795 round to smallest integral value not less than input
value;
#X obj 30 9822 math.cexp~;
#X text 200 9822 exponent of a complex signals;
#X obj 30 9849 math.cmul~;
#X text 200 9849 multiplication of complex signals;
#X obj 30 9876 math.cos;
#X text 200 9876 cosine function;
#X obj 30 9903 math.cosh;
#X text 200 9903 hyperbolic cosine function;
#X obj 30 9930 math.cosh~;
#X text 200 9930 hyperbolic cosine for signals;
#X obj 30 9957 math.cos~;
#X text 200 9957 cosine function;
#X obj 30 9984 math.div;
#X text 200 9984 division (on lists too);
#X obj 30 10011 math.e;
#X text 200 10011 mathematical constant \, base of the natural logarithm;
#X obj 30 10038 math.erf;
#X text 200 10038 error function;
#X obj 30 10065 math.erf~;
#X text 200 10065 error function for signals;
#X obj 30 10092 math.exp;
#X text 200 10092 exponential functions;
#X obj 30 10119 math.exp2;
#X text 200 10119 exponential functions;
#X obj 30 10146 math.exp2~;
#X text 200 10146 base-2 exponential for signal;
#X obj 30 10173 math.expr;
#X text 200 10173 dynamic [expr];
#X obj 30 10200 math.exp~;
#X text 200 10200 base-e exponential for signal;
#X obj 30 10227 math.floor;
#X text 200 10227 round to largest integral value not greater than
x;
#X obj 30 10254 math.floor~;
#X text 200 10254 round to largest integral value not greater than
x;
#X obj 30 10281 math.gamma;
#X text 200 10281 gamma function;
#X obj 30 10308 math.gamma~;
#X text 200 10308 gamma function for floating point signals;
#X obj 30 10335 math.gcd;
#X text 200 10335 calculate greatest common divisor;
#X obj 30 10362 math.inf;
#X text 200 10362 infinity value that cannot be represented accurately;
#X obj 30 10389 math.lcm;
#X text 200 10389 calculate least common multiple;
#X obj 30 10416 math.lgamma;
#X text 200 10416 natural logarithm of the absolute value of the gamma
function;
#X obj 30 10443 math.lgamma~;
#X text 200 10443 natural logarithm of the absolute value of the gamma
function for signals;
#X obj 30 10483 math.log;
#X text 200 10483 natural logarithm;
#X obj 30 10510 math.log10;
#X text 200 10510 logarithm functions;
#X obj 30 10537 math.log10~;
#X text 200 10537 natural logarithm;
#X obj 30 10564 math.log2;
#X text 200 10564 logarithm functions;
#X obj 30 10591 math.log2~;
#X text 200 10591 base-2 logarithm;
#X obj 30 10618 math.log~;
#X text 200 10618 natural logarithm;
#X obj 30 10645 math.mul;
#X text 200 10645 multiplication (on lists too);
#X obj 30 10672 math.nan;
#X text 200 10672 Not a Number \, unrepresentable value;
#X obj 30 10699 math.neg;
#X text 200 10699 negate function;
#X obj 30 10726 math.or;
#X text 200 10726 operation OR for multiple arguments;
#X obj 30 10753 math.pi;
#X text 200 10753 mathematical constant;
#X obj 30 10780 math.pi~;
#X text 200 10780 mathematical constant;
#X obj 30 10807 math.polyeval;
#X text 200 10807 evaluates the polynomial described by the coefficients
list;
#X obj 30 10834 math.reciprocal;
#X text 200 10834 calculate reciprocal number;
#X obj 30 10861 math.reciprocal~;
#X text 200 10861 calculate reciprocal number for signals;
#X obj 30 10888 math.round;
#X text 200 10888 round to integral value \, regardless of rounding
direction;
#X obj 30 10915 math.round~;
#X text 200 10915 signal round;
#X obj 30 10942 math.sign;
#X text 200 10942 sign function;
#X obj 30 10969 math.sin;
#X text 200 10969 sine function;
#X obj 30 10996 math.sinh;
#X text 200 10996 hyperbolic sine function;
#X obj 30 11023 math.sinh~;
#X text 200 11023 hyperbolic sine for signals;
#X obj 30 11050 math.sin~;
#X text 200 11050 sine function;
#X obj 30 11077 math.sqrt;
#X text 200 11077 square root function;
#X obj 30 11104 math.sqrt~;
#X text 200 11104 square root for signal;
#X obj 30 11131 math.squared;
#X text 200 11131 value square;
#X obj 30 11158 math.squared~;
#X text 200 11158 signal value square;
#X obj 30 11185 math.sync_add;
#X text 200 11185 sync addition;
#X obj 30 11212 math.sync_and;
#X text 200 11212 sync logical AND operation;
#X obj 30 11239 math.sync_div;
#X text 200 11239 sync division;
#X obj 30 11266 math.sync_eq;
#X text 200 11266 sync equal numbers check;
#X obj 30 11293 math.sync_ge;
#X text 200 11293 sync greater equal numbers compare;
#X obj 30 11320 math.sync_gt;
#X text 200 11320 sync greater then numbers compare;
#X obj 30 11347 math.sync_le;
#X text 200 11347 sync less equal numbers compare;
#X obj 30 11374 math.sync_lt;
#X text 200 11374 sync less then numbers compare;
#X obj 30 11401 math.sync_mod;
#X text 200 11401 sync remainder of modulo division (float or integer);
#X obj 30 11428 math.sync_mul;
#X text 200 11428 sync multiplication;
#X obj 30 11455 math.sync_ne;
#X text 200 11455 sync numbers for not equality;
#X obj 30 11482 math.sync_or;
#X text 200 11482 sync logical OR operation;
#X obj 30 11509 math.sync_sub;
#X text 200 11509 sync subtraction;
#X obj 30 11536 math.sync_xor;
#X text 200 11536 sync logical XOR operation;
#X obj 30 11563 math.tan;
#X text 200 11563 tangent function;
#X obj 30 11590 math.tanh;
#X text 200 11590 hyperbolic tangent function;
#X obj 30 11617 math.tanh~;
#X text 200 11617 hyperbolic tangent for signals;
#X obj 30 11644 math.tan~;
#X text 200 11644 tangent function;
#X obj 30 11671 math.trunc;
#X text 200 11671 truncate to integer value;
#X obj 30 11698 math.trunc~;
#X text 200 11698 truncate to integer value;
#X obj 20 11725 cnv 5 49 31 empty empty midi 4 13 0 17 -262144 -49933
0;
#X obj 20 11766 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 11777 midi.ctl2str;
#X text 200 11777 convert Standard MIDI Controllers number to name;
#X obj 30 11804 midi.event2ctl;
#X text 200 11804 convert MidiEvent message to controller channel/value
pair;
#X obj 30 11831 midi.event2note;
#X text 200 11831 convert MidiEvent message to midi note/velocity pair;
#X obj 30 11858 midi.event2prg;
#X text 200 11858 convert MidiEvent message to midi program change
value;
#X obj 30 11885 midi.file;
#X text 200 11885 standard midi file SMF reader and writer;
#X obj 30 11912 midi.key2str;
#X text 200 11912 convert key number to SPN name according to tonality;
#X obj 30 11939 midi.prg2str;
#X text 200 11939 convert GM Instrument number to name (string or symbol);
#X obj 30 11966 midi.track;
#X text 200 11966 extract track from MidiFile;
#X obj 20 11993 cnv 5 48 31 empty empty misc 4 13 0 17 -262144 -49933
0;
#X obj 20 12034 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12045 click~;
#X text 200 12045 Output single impulse on bang;
#X obj 30 12072 fluid~;
#X text 200 12072 FluidSynth SoundFont 2 player;
#X obj 30 12099 modplug~;
#X text 200 12099 MOD file player (using libmodplug);
#X obj 30 12126 speech.flite;
#X text 200 12126 render speech to array;
#X obj 20 12153 cnv 5 38 31 empty empty msg 4 13 0 17 -262144 -49933
0;
#X obj 20 12194 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12205 msg;
#X text 200 12205 message constructor;
#X obj 30 12232 msg.after;
#X text 200 12232 send specified message after incoming message;
#X obj 30 12259 msg.onload;
#X text 200 12259 send message when patch loads;
#X obj 20 12286 cnv 5 37 31 empty empty net 4 13 0 17 -262144 -49933
0;
#X obj 20 12327 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12338 net.host2ip;
#X text 200 12338 returns IP address by DNS name;
#X obj 20 12365 cnv 5 58 31 empty empty noise 4 13 0 17 -262144 -49933
0;
#X obj 20 12406 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12417 noise.crackle~;
#X text 200 12417 sparse noise generator;
#X obj 30 12444 noise.lfreq0~;
#X text 200 12444 sampled/held noise (piecewise constant);
#X obj 30 12471 noise.lfreq~;
#X text 200 12471 noise.lfreq0~ smoothed with no overshoot;
#X obj 30 12498 noise.pink~;
#X text 200 12498 Pink noise generator;
#X obj 30 12525 noise.white~;
#X text 200 12525 White noise generator;
#X obj 20 12552 cnv 5 38 31 empty empty osc 4 13 0 17 -262144 -49933
0;
#X obj 20 12593 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12604 osc.blit~;
#X text 200 12604 Bandlimited impulse train oscillator;
#X obj 30 12631 osc.impulse~;
#X text 200 12631 Bandlimited impulse train generator;
#X obj 30 12658 osc.pulse~;
#X text 200 12658 Bandlimited pulse train oscillator;
#X obj 30 12685 osc.saw4~;
#X text 200 12685 Bandlimited sawtooth wave;
#X obj 30 12712 osc.saw~;
#X text 200 12712 Alias-free sawtooth wave;
#X obj 30 12739 osc.sinfb~;
#X text 200 12739 Sine oscilator with feedback;
#X obj 30 12766 osc.sin~;
#X text 200 12766 Sine wave oscillator;
#X obj 30 12793 osc.square~;
#X text 200 12793 Bandlimited square wave oscillator;
#X obj 30 12820 osc.tri~;
#X text 200 12820 Bandlimited triangle wave oscillator;
#X obj 20 12847 cnv 5 58 31 empty empty patch 4 13 0 17 -262144 -49933
0;
#X obj 20 12888 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 12899 canvas.current;
#X text 200 12899 verbose information about current canvas;
#X obj 30 12926 canvas.dir;
#X text 200 12926 current canvas directory;
#X obj 30 12953 canvas.name;
#X text 200 12953 current canvas name;
#X obj 30 12980 canvas.path;
#X text 200 12980 current canvas fullpath;
#X obj 30 13007 canvas.top;
#X text 200 13007 verbose information about top-level canvas;
#X obj 30 13034 patch.args;
#X text 200 13034 Get patch or subpatch arguments;
#X obj 20 13061 cnv 5 47 31 empty empty path 4 13 0 17 -262144 -49933
0;
#X obj 20 13102 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13113 path.basename;
#X text 200 13113 outputs filename portion of pathname;
#X obj 30 13140 path.dirname;
#X text 200 13140 outputs directory portion of pathname;
#X obj 30 13167 path.exists;
#X text 200 13167 checks if given path exists;
#X obj 30 13194 path.is_dir;
#X text 200 13194 check if path is directory;
#X obj 30 13221 path.lsdir;
#X text 200 13221 list directory contents;
#X obj 20 13248 cnv 5 109 31 empty empty predicates 4 13 0 17 -262144
-49933 0;
#X obj 20 13289 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13300 is_any;
#X text 200 13300 checks if input data has *any* type;
#X obj 30 13327 is_bang;
#X text 200 13327 checks if input data has *bang* type;
#X obj 30 13354 is_data;
#X text 200 13354 checks if input data has *data* type;
#X obj 30 13381 is_dict;
#X text 200 13381 checks if input data has *dict* type;
#X obj 30 13408 is_even;
#X text 200 13408 checks if input number is even;
#X obj 30 13435 is_file;
#X text 200 13435 checks if file exists and accessible;
#X obj 30 13462 is_float;
#X text 200 13462 checks if input data has *float* type;
#X obj 30 13489 is_list;
#X text 200 13489 checks if input data has *list* type;
#X obj 30 13516 is_odd;
#X text 200 13516 checks if input number is odd;
#X obj 30 13543 is_pointer;
#X text 200 13543 checks if input data has *pointer* type;
#X obj 30 13570 is_symbol;
#X text 200 13570 checks if input data has *symbol* type;
#X obj 20 13597 cnv 5 68 31 empty empty preset 4 13 0 17 -262144
-49933 0;
#X obj 20 13638 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13649 preset.float;
#X text 200 13649 load/store float preset;
#X obj 30 13676 preset.list;
#X text 200 13676 load/store symbol preset;
#X obj 30 13703 preset.storage;
#X text 200 13703 preset storage control;
#X obj 30 13730 preset.symbol;
#X text 200 13730 load/store symbol preset;
#X obj 20 13757 cnv 5 89 31 empty empty property 4 13 0 17 -262144
-49933 0;
#X obj 20 13798 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 13809 patch.props;
#X text 200 13809 patch properties manager;
#X obj 30 13836 prop;
#X text 200 13836 get/set named property value for subpatch or abstraction;
#X obj 30 13863 prop.declare;
#X text 200 13863 declare named property for subpatch or abstraction;
#X obj 30 13890 prop.get;
#X text 200 13890 Property extractor;
#X obj 30 13917 prop.get~;
#X text 200 13917 Property extractor from sound stream;
#X obj 30 13944 prop.set;
#X text 200 13944 Property injector;
#X obj 20 13971 cnv 5 58 31 empty empty proto 4 13 0 17 -262144 -49933
0;
#X obj 20 14012 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14023 proto.firmata;
#X text 200 14023 Firmata Arduino protocol support;
#X obj 30 14050 proto.sp.alpaca;
#X text 200 14050 protocol parser for Arduino-based CEAMMC footswitch;
#X obj 20 14077 cnv 5 67 31 empty empty random 4 13 0 17 -262144
-49933 0;
#X obj 20 14118 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14129 random.discrete;
#X text 200 14129 random weighted integers on interval [0 \, n);
#X obj 30 14156 random.float;
#X text 200 14156 random float generator in specified range;
#X obj 30 14183 random.gauss;
#X text 200 14183 gaussian random distribution;
#X obj 30 14210 random.int;
#X text 200 14210 Random integer generator in specified range;
#X obj 30 14237 random.linear;
#X text 200 14237 random linear distribution;
#X obj 30 14264 random.pw_const;
#X text 200 14264 piecewise constant random distribution;
#X obj 30 14291 random.pw_lin;
#X text 200 14291 piecewise linear random distribution;
#X obj 20 14318 cnv 5 37 31 empty empty snd 4 13 0 17 -262144 -49933
0;
#X obj 20 14359 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14370 snd.file;
#X text 200 14370 Sound file loader on steroids;
#X obj 20 14397 cnv 5 47 31 empty empty spat 4 13 0 17 -262144 -49933
0;
#X obj 20 14438 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 14449 hoa.2d.decoder~;
#X text 200 14449 hoa 2d decoder;
#X obj 30 14476 hoa.2d.encoder~;
#X text 200 14476 hoa 2d encoder;
#X obj 30 14503 hoa.2d.map~;
#X text 200 14503 a 2d ambisonic multisource spatializer;
#X obj 30 14530 hoa.2d.optim~;
#X text 200 14530 a 2D ambisonic optimization tool;
#X obj 30 14557 hoa.2d.projector~;
#X text 200 14557 a plane waves decomposer from circular harmonics
domain;
#X obj 30 14584 hoa.2d.recomposer~;
#X text 200 14584 recomposes a 2d plane wave decomposition into circular
harmonics;
#X obj 30 14624 hoa.2d.rotate~;
#X text 200 14624 a 2D ambisonic sound field rotation;
#X obj 30 14651 hoa.2d.wider~;
#X text 200 14651 a 2d fractional ambisonic order simulator;
#X obj 30 14678 hoa.@process;
#X text 200 14678 process properties manager for hoa.process~;
#X obj 30 14705 hoa.in;
#X text 200 14705 message inlet for a patcher loaded by hoa.process~;
#X obj 30 14732 hoa.in~;
#X text 200 14732 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 14759 hoa.out;
#X text 200 14759 message outlet for a patcher loaded by hoa.process~;
#X obj 30 14786 hoa.out~;
#X text 200 14786 signal inlet for a patcher loaded by hoa.process~;
#X obj 30 14813 hoa.process~;
#X text 200 14813 patcher loader for multichannel processing;
#X obj 30 14843 ui.link @title [hoa.scope~] @url hoa.scope~-help.pd;
#X text 200 14840 a 2d ambisonic harmonic scope;
#X obj 30 14865 pan.cos~;
#X text 200 14865 two channel equal power sine/cosine panner;
#X obj 30 14892 pan.linsig~;
#X text 200 14892 two channel linear panner with signal control;
#X obj 30 14919 pan.lin~;
#X text 200 14919 two channel linear panner;
#X obj 30 14946 pan.spread~;
#X text 200 14946 spreads input channels across the stereo field;
#X obj 30 14973 pan.sqrt~;
#X text 200 14973 two channel equal power square root panner;
#X obj 30 15000 spat.pan4~;
#X text 200 15000 GMEM SPAT: 4-outputs spatializer;
#X obj 30 15027 spat.pan8~;
#X text 200 15027 GMEM SPAT: 8-outputs spatializer;
#X obj 20 15054 cnv 5 68 31 empty empty string 4 13 0 17 -262144
-49933 0;
#X obj 20 15095 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15106 string;
#X text 200 15106 string constructor;
#X obj 30 15133 string.contains;
#X text 200 15133 checks if given string contains specified substring;
#X obj 30 15160 string.ends_with;
#X text 200 15160 checks if given string ends with specified suffix;
#X obj 30 15187 string.equal;
#X text 200 15187 check strings for equality;
#X obj 30 15214 string.format;
#X text 200 15214 formats string like printf.;
#X obj 30 15241 string.join;
#X text 200 15241 joins (concatenates) strings with separator;
#X obj 30 15268 string.length;
#X text 200 15268 number of characters in string (unicode supported);
#X obj 30 15295 string.match;
#X text 200 15295 check if string match regular expression;
#X obj 30 15322 string.remove;
#X text 200 15322 remove substring from input string;
#X obj 30 15349 string.replace;
#X text 200 15349 replace from one substring to another in input string;
#X obj 30 15376 string.split;
#X text 200 15376 split string by separator;
#X obj 30 15403 string.starts_with;
#X text 200 15403 checks if given string starts with specified prefix;
#X obj 30 15430 string.substr;
#X text 200 15430 extract substring from input string;
#X obj 30 15457 string2symbol;
#X text 200 15457 converts string to symbol;
#X obj 20 15484 cnv 5 68 31 empty empty symbol 4 13 0 17 -262144
-49933 0;
#X obj 20 15525 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15536 symbol.equal;
#X text 200 15536 check symbols for equality;
#X obj 30 15563 symbol.length;
#X text 200 15563 number of characters in symbol (unicode supported);
#X obj 30 15590 symbol.num_compare;
#X text 200 15590 numeric symbol compare;
#X obj 20 15617 cnv 5 57 31 empty empty synth 4 13 0 17 -262144 -49933
0;
#X obj 20 15658 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 15669 synth.bee3~;
#X text 200 15669 Hammond-oid organ FM synthesis instrument;
#X obj 30 15696 synth.birds~;
#X text 200 15696 bird singing generator;
#X obj 30 15723 synth.church_bell~;
#X text 200 15723 generic church bell modal model;
#X obj 30 15750 synth.dubdub~;
#X text 200 15750 simple synth based on a sawtooth wave filtered by
a resonant lowpass;
#X obj 30 15790 synth.eguitar~;
#X text 200 15790 simple electric guitar model with steel strings;
#X obj 30 15817 synth.fgrain~;
#X text 200 15817 file granulator from STK;
#X obj 30 15844 synth.ks~;
#X text 200 15844 Karplus-Strong string;
#X obj 30 15871 synth.marimba~;
#X text 200 15871 simple marimba physical model implementing a single
tone bar connected to tube;
#X obj 30 15911 synth.rhodey~;
#X text 200 15911 STK Fender Rhodes electric piano FM synthesis instrument;
#X obj 30 15938 synth.risset_arp~;
#X text 200 15938 Jean Claude Risset's harmonic arpeggio effect;
#X obj 30 15965 synth.risset_tone~;
#X text 200 15965 Jean Claude Risset's endless glissando;
#X obj 30 15992 synth.shakers~;
#X text 200 15992 various percussion sounds from STK library;
#X obj 30 16019 synth.wurley~;
#X text 200 16019 Wurlitzer electric piano FM synthesis instrument;
#X obj 20 16046 cnv 5 68 31 empty empty system 4 13 0 17 -262144
-49933 0;
#X obj 20 16087 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16098 system.colorpanel;
#X text 200 16098 System color panel dialog popup;
#X obj 30 16125 system.cursor;
#X text 200 16125 Output cursor motion \, mousewheel and buttonclicks;
#X obj 30 16152 system.exec;
#X text 200 16152 run external command in separate process;
#X obj 30 16179 system.getenv;
#X text 200 16179 Get system environment variables;
#X obj 30 16206 system.hostname;
#X text 200 16206 outputs system hostname;
#X obj 30 16233 system.memsize;
#X text 200 16233 returns the size of physical memory (RAM) in bytes
round to float data type.;
#X obj 30 16273 system.memused;
#X text 200 16273 returns the process physical memory use - current
and peak;
#X obj 30 16300 system.screen_size;
#X text 200 16300 returns current screen size in pixels;
#X obj 20 16327 cnv 5 28 31 empty empty tl 4 13 0 17 -262144 -49933 0;
#X obj 20 16368 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16379 tl.bang;
#X text 200 16379 Timeline bang (with possible delay);
#X obj 30 16409 ui.link @title [tl.cue] @url tl.cue-help.pd;
#X text 200 16406 Timeline section;
#X obj 30 16431 tl.timeline;
#X text 200 16431 Timeline - event scheduler;
#X obj 30 16458 tl.toggle;
#X text 200 16458 Timeline bang;
#X obj 30 16485 tl.transport;
#X text 200 16485 Timeline transport control;
#X obj 20 16512 cnv 5 28 31 empty empty ui 4 13 0 17 -262144 -49933 0;
#X obj 20 16553 cnv 1 720 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 30 16567 ui.link @title [ui.aview] @url ui.aview-help.pd;
#X text 200 16564 array view with cursor and selection;
#X obj 30 16592 ui.link @title [ui.bang] @url ui.bang-help.pd;
#X text 200 16589 A bang... that's all;
#X obj 30 16617 ui.link @title [ui.colorpanel] @url
ui.colorpanel-help.pd;
#X text 200 16614 colorchooser widget;
#X obj 30 16642 ui.link @title [ui.display] @url ui.display-help.pd;
#X text 200 16639 Display GUI object;
#X obj 30 16667 ui.link @title [ui.dsp~] @url ui.dsp~-help.pd;
#X text 200 16664 GUI for turning DSP on/off;
#X obj 30 16692 ui.link @title [ui.env] @url ui.env-help.pd;
#X text 200 16689 envelope editor widget;
#X obj 30 16717 ui.link @title [ui.gain2~] @url ui.gain2~-help.pd;
#X text 200 16714 UI stereo gain control;
#X obj 30 16742 ui.link @title [ui.gain~] @url ui.gain~-help.pd;
#X text 200 16739 UI gain control;
#X obj 30 16767 ui.link @title [ui.icon] @url ui.icon-help.pd;
#X text 200 16764 simple icon with button capabilities;
#X obj 30 16792 ui.link @title [ui.incdec] @url ui.incdec-help.pd;
#X text 200 16789 value increment/decrement;
#X obj 30 16817 ui.link @title [ui.keyboard] @url ui.keyboard-help.pd;
#X text 200 16814 keyboard widget;
#X obj 30 16842 ui.link @title [ui.knob] @url ui.knob-help.pd;
#X text 200 16839 knob widget;
#X obj 30 16867 ui.link @title [ui.label] @url ui.label-help.pd;
#X text 200 16864 simple label widget;
#X obj 30 16892 ui.link @title [ui.link] @url ui.link-help.pd;
#X text 200 16889 Hyperlink widget;
#X obj 30 16917 ui.link @title [ui.matrix] @url ui.matrix-help.pd;
#X text 200 16914 The matrix of toggles has you.;
#X obj 30 16942 ui.link @title [ui.menu] @url ui.menu-help.pd;
#X text 200 16939 Dropdown menu;
#X obj 30 16967 ui.link @title [ui.meter~] @url ui.meter~-help.pd;
#X text 200 16964 Shows peak and rms signal level;
#X obj 30 16992 ui.link @title [ui.mouse_filter] @url
ui.mouse_filter-help.pd;
#X text 200 16989 filter mouse events from ui objects;
#X obj 30 17017 ui.link @title [ui.mouse_route] @url
ui.mouse_route-help.pd;
#X text 200 17014 routes mouse events from ui objects;
#X obj 30 17042 ui.link @title [ui.number] @url ui.number-help.pd;
#X text 200 17039 counterpart of the vanilla [nbx];
#X obj 30 17067 ui.link @title [ui.number~] @url ui.number~-help.pd;
#X text 200 17064 counterpart of the vanilla [nbx] for signal;
#X obj 30 17092 ui.link @title [ui.plot~] @url ui.plot~-help.pd;
#X text 200 17089 signal plotter;
#X obj 30 17117 ui.link @title [ui.polar] @url ui.polar-help.pd;
#X text 200 17114 2D slider in polar coordinates;
#X obj 30 17142 ui.link @title [ui.preset] @url ui.preset-help.pd;
#X text 200 17139 Preset manager;
#X obj 30 17167 ui.link @title [ui.radio] @url ui.radio-help.pd;
#X text 200 17164 counterpart of the vanilla radio toggle;
#X obj 30 17192 ui.link @title [ui.rslider] @url ui.rslider-help.pd;
#X text 200 17189 range slider;
#X obj 30 17217 ui.link @title [ui.scope~] @url ui.scope~-help.pd;
#X text 200 17214 Scope GUI object;
#X obj 30 17242 ui.link @title [ui.slider] @url ui.slider-help.pd;
#X text 200 17239 counterpart of the vanilla slider;
#X obj 30 17267 ui.link @title [ui.slider2d] @url ui.slider2d-help.pd;
#X text 200 17264 2D slider widget;
#X obj 30 17292 ui.link @title [ui.sliders] @url ui.sliders-help.pd;
#X text 200 17289 Multiple slider widget;
#X obj 30 17317 ui.link @title [ui.spectroscope~] @url
ui.spectroscope~-help.pd;
#X text 200 17314 Spectroscope GUI object;
#X obj 30 17342 ui.link @title [ui.tab] @url ui.tab-help.pd;
#X text 200 17339 displays a list of text buttons or text toggles;
#X obj 30 17367 ui.link @title [ui.toggle] @url ui.toggle-help.pd;
#X text 200 17364 modern toggle widget;
#X obj 1 1 cnv 5 740 40 empty empty ceammc 20 20 0 20 -104026 -4096 0;
#X obj 1 17389 cnv 5 740 80 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 17389 version: v0.9.0 \, license: GPL3;
#X obj 20 17417 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 20 17440 ui.link @title Generated with pddoc @url
http://github.com/uliss/pddoc;
#X obj 670 17404 msg 0;
#X obj 670 17439 switch~;
#X connect 1196 0 1197 0;