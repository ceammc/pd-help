#N canvas 0 0 760 555 12;
#X obj 20 53 ui.link @title index @url ../index-help.pd;
#X text 62 50 ::;
#X obj 79 53 ui.link @title ceammc @url ceammc-help.pd;
#X obj 528 50 cnv 1 212 23 empty empty empty 17 7 0 10 -245760 -1 0;
#X text 528 50 objects for list processing;
#X obj 30 116 list.^at;
#X text 200 116 on input index(es) outputs list element(s);
#X obj 30 143 list.^contains;
#X text 200 143 on input atom or list checks if specified list contains
it;
#X obj 30 170 list.^search;
#X text 200 170 on input atom returns it index in list;
#X obj 30 197 list.all_of;
#X text 200 197 checks if all list atoms accepted by predicate;
#X obj 30 224 list.any_of;
#X text 200 224 checks if at least one list element is accepted by
predicate;
#X obj 30 251 list.append;
#X text 200 251 append atom or list to the end of input list;
#X obj 30 278 list.apply_to;
#X text 200 278 modifies list value at specified position \, filtering
it via external object.;
#X obj 30 318 list.at;
#X text 200 318 on input list outputs element(s) at specified index(es);
#X obj 30 345 list.choice;
#X text 200 345 returns random element from list;
#X obj 30 372 list.contains;
#X text 200 372 checks if input list contains specified atoms;
#X obj 30 399 list.count;
#X text 200 399 returns the number of items that equal to specified
value;
#X obj 30 426 list.count_if;
#X text 200 426 returns the number of items that satisfy to external
predicate.;
#X obj 30 466 list.delta;
#X text 200 466 returns the difference between the current list of
floats and the previous one.;
#X obj 30 506 list.distribution;
#X text 200 506 list value distribution;
#X obj 30 533 list.do;
#X text 200 533 iterate and modify list contents via side-chain;
#X obj 30 560 list.each;
#X text 200 560 maps each list value via external object(s);
#X obj 30 587 list.enumerate;
#X text 200 587 enumerates input list;
#X obj 30 614 list.equal;
#X text 200 614 checks if given lists are equal;
#X obj 30 641 list.first;
#X text 200 641 returns first list element;
#X obj 30 668 list.gen;
#X text 200 668 generates list of specified length via external generator;
#X obj 30 695 list.histogram;
#X text 200 695 outputs distribution histogram;
#X obj 30 722 list.insert;
#X text 200 722 insert atom or list to the specified position of input
list;
#X obj 30 749 list.integrator;
#X text 200 749 returns the sum of the previously stored list and the
current one then stores this sum;
#X obj 30 789 list.last;
#X text 200 789 returns last list element;
#X obj 30 816 list.length;
#X text 200 816 returns the number of atoms in the list;
#X obj 30 843 list.max;
#X text 200 843 returns largest element in the list;
#X obj 30 870 list.mean;
#X text 200 870 calculates average of list of floats;
#X obj 30 897 list.min;
#X text 200 897 returns smallest element in the list;
#X obj 30 924 list.none_of;
#X text 200 924 checks if none of list atoms is accepted by predicate;
#X obj 30 951 list.normalize;
#X text 200 951 normalizes float list values to get their sum = 1.0;
#X obj 30 978 list.pass_if;
#X text 200 978 leave only elements accepted by predicate;
#X obj 30 1005 list.prepend;
#X text 200 1005 prepend atom or list before input list;
#X obj 30 1032 list.product;
#X text 200 1032 calculates product of floats in list;
#X obj 30 1059 list.range;
#X text 200 1059 returns list smallest and largest value;
#X obj 30 1086 list.reduce;
#X text 200 1086 apply function of two arguments cumulatively to the
list;
#X obj 30 1113 list.remove;
#X text 200 1113 on input list remove element(s) at specified positions;
#X obj 30 1140 list.remove_if;
#X text 200 1140 remove elements by predicate;
#X obj 30 1167 list.repack;
#X text 200 1167 repack input list to specified size;
#X obj 30 1194 list.repeat;
#X text 200 1194 creates new list by repeating given list specified
times;
#X obj 30 1221 list.resample;
#X text 200 1221 resample list with specified ratio;
#X obj 30 1248 list.resize;
#X text 200 1248 changes list size;
#X obj 30 1275 list.reverse;
#X text 200 1275 reverses the order of the elements in the list;
#X obj 30 1302 list.rldecode;
#X text 200 1302 Run-length list decoder (RLE);
#X obj 30 1329 list.rlencode;
#X text 200 1329 RLE (run-length encoding) for lists;
#X obj 30 1356 list.rotate;
#X text 200 1356 rotates list;
#X obj 30 1383 list.route;
#X text 200 1383 acts like [route] but for lists;
#X obj 30 1410 list.search;
#X text 200 1410 search specified items in input list;
#X obj 30 1437 list.separate;
#X text 200 1437 sends list elements one by one separately;
#X obj 30 1464 list.seq;
#X text 200 1464 numeric sequence list generator;
#X obj 30 1491 list.set;
#X text 200 1491 on input list set value at specified position;
#X obj 30 1518 list.shift;
#X text 200 1518 shifts the contents of the list with linear interpolation;
#X obj 30 1545 list.shuffle;
#X text 200 1545 randomly rearranges elements in list;
#X obj 30 1572 list.slice;
#X text 200 1572 extract sublist;
#X obj 30 1599 list.sort;
#X text 200 1599 sorts list values by ascending order;
#X obj 30 1626 list.sort_with;
#X text 200 1626 sort list with user defined side-chain;
#X obj 30 1653 list.split;
#X text 200 1653 splits list into two parts \, the length of first
list is specified by the argument.;
#X obj 30 1693 list.stretch;
#X text 200 1693 stretches list - changes its size with linear interpolation;
#X obj 30 1720 list.sum;
#X text 200 1720 calculates sum of floats in list;
#X obj 30 1747 list.unique;
#X text 200 1747 removes duplicates from input list;
#X obj 30 1774 list.unpack;
#X text 200 1774 unpack list elements to separate outlets;
#X obj 30 1801 list.unzip;
#X text 200 1801 splits list to N lists \, each to separate output;
#X obj 30 1828 list.walk;
#X text 200 1828 Walks thru the list;
#X obj 30 1855 list.zip;
#X text 200 1855 takes n lists from n inlets (specified by argument)
and output their elements sequentially (list1-1 list2-1 list1-2 list2-2
etc.).;
#X obj 1 1 cnv 5 740 40 empty empty ceammc::list 20 20 0 20 -104026
-4096 0;
#X obj 1 1910 cnv 5 740 40 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 20 1920 library: ceammc;