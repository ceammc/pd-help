<?xml version="1.0" encoding="utf-8"?>
<pddoc version="1.0">
    <object name="envelope">
        <title>envelope</title>
        <meta>
            <authors>
                <author>Serge Poltavsky</author>
            </authors>
            <description>Envelope data type</description>
            <license>GPL3 or later</license>
            <library>ceammc</library>
            <category>env</category>
            <keywords>envelope</keywords>
            <since>0.5</since>
            <also>
                <see>env-&gt;array</see>
                <see>env-&gt;vline</see>
            </also>
            <aliases>
                <alias>env</alias>
            </aliases>
        </meta>
        <info>
            <par>Data type for sound envelope. Contains points specified by time and value. Points
            could have stop property - to execute oly part of envelope and stop on this point. So
            multisegment envelopes could be created</par>
            <par>Point also has segment type property, that defines following segment curve - it
            could be *step*, *line* (default) or *exp* (exponential)</par>
            <par>Exponential segment also has curve property: if 0 - (linear) &lt;0 (concave,
            negatively curved) &gt;0 (convex, positively curved)</par>
        </info>
        <methods>
            <method name="clear">remove all envelope points</method>
            <!-- add point -->
            <method name="add_point">add envelope point 
            <param name="TIME" type="float" units="millisecond" required="true" minvalue="0">point
            time</param>
            <param name="VALUE" type="float" required="true">point value</param>
            <param name="IS_STOP" type="int" enum="0 1" default="0">is stop point</param>
            <param name="TYPE" type="symbol" enum="step line exp sin2 sigmoid" default="line">
            segment type: step, linear, exponential, sin^2 or sigmoid curve</param>
            <param name="CURVE" type="float" default="1">exponential curve degree: 0 (linear) &lt;0
            (concave, negatively curved) &gt;0 (convex, positively curved)</param></method>
            <!-- remove point -->
            <method name="remove_point">remove envelope point by specified time 
            <param name="IDX" type="int" required="true" minvalue="0">point index</param></method>
            <!-- set point -->
            <method name="set_point">set point time and value 
            <param name="IDX" type="int" required="true" minvalue="0">point index</param>
            <param name="TIME" type="float" units="millisecond" required="true" minvalue="0">point
            time</param>
            <param name="VALUE" type="int" required="true" minvalue="0">point value</param>
            <param name="IS_STOP" type="int" enum="0 1" default="0">stop point</param></method>
            <!-- set point time -->
            <method name="set_point_time">set point time 
            <param name="IDX" type="int" required="true" minvalue="0">point index</param>
            <param name="TIME" type="float" units="millisecond" required="true" minvalue="0">point
            time</param></method>
            <!-- set point value -->
            <method name="set_point_value">set point time 
            <param name="IDX" type="int" required="true" minvalue="0">point index</param>
            <param name="VALUE" type="int" required="true" minvalue="0">point
            value</param></method>
            <!-- set_stop_point -->
            <method name="set_stop_point">set stop-point 
            <param name="IDX" type="int" required="true" minvalue="0">point index</param>
            <param name="IS_STOP" type="int" enum="0 1" required="true">stop point</param></method>
            <!-- + value -->
            <method name="+">add specified value to all envelope points 
            <param name="VALUE" type="float" required="true">value</param></method>
            <!-- * value -->
            <method name="*">multiply all envelope points to specified value 
            <param name="VALUE" type="float" required="true">value</param></method>
            <!-- >> -->
            <method name="&gt;&gt;">shift all envelope point by specified time in milliseconds 
            <param name="SHIFT" type="float" required="true" units="millisecond">
            value</param></method>
            <!-- add_seg -->
            <method name="add_seg">add segment to the end of envelope. On empty envelope adds start
            point at 0ms and 0 value 
            <param name="TYPE" type="symbol" required="true" enum="step line sin2 exp sigmoid">
            segment type</param>
            <param name="LENGTH" type="float" units="millisecond" required="true">segment
            length</param>
            <param name="VALUE" type="float" required="true">end segment value</param>
            <param name="CURVE" type="float" required="false" default="0">curve (for exp and
            sigmoid type)</param></method>
            <!-- set_seg_type -->
            <method name="set_seg_type">set segment type 
            <param name="IDX" type="int" required="true" minvalue="0">segment index, starting from
            0</param>
            <param name="TYPE" type="symbol" required="true" enum="step line sin2 exp sigmoid">
            segment type</param></method>
            <!-- adsr -->
            <method name="adsr">creates ADSR envelope with one stop point 
            <param name="ATTACK" type="float" units="millisecond" required="true" minvalue="0">
            attack time</param>
            <param name="DECAY" type="float" units="millisecond" required="true" minvalue="0">decay
            time</param>
            <param name="SUSTAIN" type="float" units="percent" required="true" minvalue="0"
            maxvalue="100">sustain level</param>
            <param name="RELEASE" type="float" units="millisecond" required="true" minvalue="0">
            release time</param></method>
            <!-- asr-->
            <method name="asr">creates ASR envelope with one stop point 
            <param name="ATTACK" type="float" units="millisecond" required="true" minvalue="0">
            attack time</param>
            <param name="RELEASE" type="float" units="millisecond" required="true" minvalue="0">
            release time</param></method>
            <!-- ar-->
            <method name="ar">creates AR envelope without stop points 
            <param name="ATTACK" type="float" units="millisecond" required="true" minvalue="0">
            attack time</param>
            <param name="RELEASE" type="float" units="millisecond" required="true" minvalue="0">
            release time</param></method>
            <!-- eadsr-->
            <method name="eadsr">creates exponential ADSR envelope with one stop point 
            <param name="ATTACK" type="float" units="millisecond" required="true" minvalue="0">
            attack time</param>
            <param name="ATTACK_CURVE" type="float" required="true">attack segment curve</param>
            <param name="DECAY" type="float" units="millisecond" required="true" minvalue="0">decay
            time</param>
            <param name="DECAY_CURVE" type="float" required="true">decay segment curve</param>
            <param name="SUSTAIN" type="float" units="percent" required="true" minvalue="0"
            maxvalue="100">sustain level</param>
            <param name="RELEASE" type="float" units="millisecond" required="true" minvalue="0">
            release time</param>
            <param name="RELEASE_CURVE" type="float" required="true">release segment
            curve</param></method>
            <!-- easr-->
            <method name="easr">creates exponential AR envelope with one stop point 
            <param name="ATTACK" type="float" units="millisecond" required="true" minvalue="0">
            attack time</param>
            <param name="ATTACK_CURVE" type="float" required="true">attack segment curve</param>
            <param name="RELEASE" type="float" units="millisecond" required="true" minvalue="0">
            release time</param>
            <param name="RELEASE_CURVE" type="float" required="true">release segment
            curve</param></method>
            <!-- ear-->
            <method name="ear">creates exponential AR envelope without stop points 
            <param name="ATTACK" type="float" units="millisecond" required="true">attack
            time</param>
            <param name="ATTACK_CURVE" type="float" required="true">attack segment curve</param>
            <param name="RELEASE" type="float" units="millisecond" required="true">release
            time</param>
            <param name="RELEASE_CURVE" type="float" required="true">release segment
            curve</param></method>
            <!-- step -->
            <method name="step">creates step-segmented envelope with arbitrary number of segments 
            <param name="VAL0" type="float" required="true">begin value</param>
            <param name="LEN0" type="float" units="millisecond" required="true" minvalue="1">step
            length</param>
            <param name="VAL1" type="float" required="true">value</param>
            <param name="LEN1" type="float" required="false">segment length</param>
            <param name="VAL2" type="float" required="false">value</param></method>
            <!-- line -->
            <method name="line">creates line-segmented envelope with arbitrary number of segments 
            <param name="VAL0" type="float" required="true">begin value</param>
            <param name="LEN0" type="float" units="millisecond" required="true" minvalue="1">line
            length</param>
            <param name="VAL1" type="float" required="true">value</param>
            <param name="LEN1" type="float" required="false">segment length</param>
            <param name="VAL2" type="float" required="false">value</param></method>
            <!-- sin2 -->
            <method name="sin2">creates quadratic sine-segmented envelope with arbitrary number of
            segments 
            <param name="VAL0" type="float" required="true">begin value</param>
            <param name="LEN0" type="float" units="millisecond" required="true" minvalue="1">line
            length</param>
            <param name="VAL1" type="float" required="true">value</param>
            <param name="LEN1" type="float" required="false">segment length</param>
            <param name="VAL2" type="float" required="false">value</param></method>
            <!-- exp -->
            <method name="exp">creates exponential-segmented envelope with arbitrary number of
            segments 
            <param name="VAL0" type="float" required="true">begin value</param>
            <param name="LEN0" type="float" units="millisecond" required="true" minvalue="1">line
            length</param>
            <param name="CURVE0" type="float" required="true">segment curve</param>
            <param name="VAL1" type="float" required="true">value</param>
            <param name="LEN1" type="float" required="false">segment length</param>
            <param name="CURVE1" type="float" required="false">segment curve</param>
            <param name="VAL2" type="float" required="false">value</param></method>
            <!-- sigmoid -->
            <method name="sigmoid">creates sigmoid-segmented envelope with arbitrary number of
            segments 
            <param name="VAL0" type="float" required="true">begin value</param>
            <param name="LEN0" type="float" units="millisecond" required="true" minvalue="1">line
            length</param>
            <param name="CURVE0" type="float" required="true">segment curve</param>
            <param name="VAL1" type="float" required="true">value</param>
            <param name="LEN1" type="float" required="false">segment length</param>
            <param name="CURVE1" type="float" required="false">segment curve</param>
            <param name="VAL2" type="float" required="false">value</param></method>
        </methods>
        <arguments>
            <argument name="adsr" type="list">ADSR envelope: attack(ms), decay(ms), sustain(%),
            release(ms)</argument>
            <argument name="asr" type="list">ASR envelope: attack(ms), release(ms) - with sustain
            stop point</argument>
            <argument name="ar" type="list">AR envelope: attack(ms), release(ms)</argument>
            <argument name="eadsr" type="list">exponential ADSR envelope: attack(ms), attack_curve,
            decay(ms), decay_curve, sustain(%), release(ms), release_curve</argument>
            <argument name="easr" type="list">exponential ASR envelope: attack(ms), attack_curve,
            release(ms), release_curve - with sustain stop point</argument>
            <argument name="ear" type="list">exponential ASR envelope: attack(ms), attack_curve,
            release(ms), release_curve - no sustain point</argument>
        </arguments>
        <properties>
            <property name="@npoints" type="int" readonly="true" minvalue="0" default="0">number of
            points</property>
            <property name="@length" type="float" units="millisecond" readonly="true" default="0"
            minvalue="0">total envelope time length</property>
            <property name="@points" type="list" readonly="true">list of point times
            (ms)</property>
            <property name="@values" type="list" readonly="true">list of point values</property>
            <property name="@stops" type="list" readonly="true">list of stop points</property>
        </properties>
        <inlets>
            <inlet>
                <xinfo on="bang">outputs current envelope</xinfo>
                <xinfo on="data">set new envelope and output it</xinfo>
            </inlet>
        </inlets>
        <outlets>
            <outlet>data output</outlet>
        </outlets>
        <example>
            <pdascii>
<![CDATA[
[ar 100 200, bang( [exp 0 30 -2 1 100 -4 0 40 4 0.5 30 2 0, bang #a(
|
| [adsr 10 30 60 150, bang( [line 0.1 40 0.9 20 0.3 60 0, bang #b(
| |
| | [ear 10 -2 60 -2, bang( [sigmoid 0 40 14 1 100 8 0, bang #c(
| | |
| | | [eadsr 20 -5 70 -12 30 100 -7, bang( [sin2 0 80 1 80 0, bang #d(
| | | |
[envelope #env]
|
[env->array env_arr]


[array env_arr size=100 w=400 h=100 yr=0..1]

[X a->env] [X b->env] [X c->env] [X d->env]
]]>
            </pdascii>
        </example>
    </object>
</pddoc>
