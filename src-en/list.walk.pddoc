<?xml version="1.0" encoding="utf-8"?>
<pddoc version="1.0">
    <object name="list.walk">
        <title>list.walk</title>
        <meta>
            <authors>
                <author>Serge Poltavsky</author>
            </authors>
            <description>Walks thru the list</description>
            <license>GPL3 or later</license>
            <library>ceammc</library>
            <category>list</category>
            <keywords>list walk iterate</keywords>
            <since>0.1</since>
            <also>
                <see>list.gen</see>
                <see>list.seq</see>
            </also>
        </meta>
        <info>
            <par>Universal list walker. If you want to output current element and when move to next
            - use [1( message, Otherwise - use [next( if you want first move to next position and
            then output it.</par>
        </info>
        <arguments>
            <argument type="list" name="INIT">initial list</argument>
        </arguments>
        <properties>
            <property name="@mode" type="symbol" enum="single clip wrap fold" default="single">pass
            mode. See properties below for detailed information.</property>
            <property name="@clip" type="alias">clipped pass mode. When the list bounds are reached
            - min/max value repeats perpetually.</property>
            <property name="@single" type="alias">single pass mode. When the list bounds are
            reached - no output any more until reset.</property>
            <property name="@loop" type="alias">@wrap alias</property>
            <property name="@wrap" type="alias">wrap pass mode. List values are repeated in a
            loop</property>
            <property name="@fold" type="alias">fold pass mode. List values are repeated in a loop
            with folding</property>
            <property name="@direction" type="int" default="1" enum="0 1">walking direction. "1" -
            forwards, "0" - backwards.</property>
            <property name="@index" type="list" minvalue="0" default="0">current
            position</property>
            <property name="@length" type="int" minvalue="1" default="1">output list
            length</property>
            <property name="@size" type="int" minvalue="0" readonly="true" default="0">current list
            size</property>
            <property name="@value" type="list" readonly="true">current list</property>
        </properties>
        <methods>
            <method name="current">outputs current element</method>
            <method name="dump">dump internal object state to Pd console window</method>
            <method name="next">
                <param type="int" default="1" name="STEP">moves to next element with optional given
                step and outputs it</param>
            </method>
            <method name="prev">
                <param type="int" default="1" name="STEP">moves to previous element with optional
                given step and outputs it</param>
            </method>
            <method name="reset">sets current position to 0</method>
        </methods>
        <inlets>
            <inlet>
                <xinfo on="bang">outputs current element and moves to next</xinfo>
                <xinfo on="float">outputs current element and moves by specified position</xinfo>
                <xinfo on="list">set new list and reset current position. (no output)</xinfo>
            </inlet>
        </inlets>
        <outlets>
            <outlet>list element</outlet>
        </outlets>
        <example>
            <pdascii>
<![CDATA[
[_]                     [_]
|                       |
[metro 100] [1 6 9 11( [@direction $1(
|           |          |
|           | [@clip(  | [@single( [@loop( [@fold(
|           | |        | |         |       |
|   [-1(    | |  [1(   | |         |       | [prev( [next(
|   |       | |  |     | |         |       | |      |
[list.walk 1 3 6 8                             @fold]
|
[+ 60]
|
[mtof]
|
[osc~]
|
[*~ 0.1]
| \
[dac~]
]]>
            </pdascii>
        </example>
    </object>
</pddoc>
