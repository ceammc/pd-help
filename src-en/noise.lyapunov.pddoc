<?xml version="1.0" encoding="utf-8"?>
<pddoc version="1.0">
    <object name="noise.lyapunov">
        <title>noise.lyapunov</title>
        <meta>
            <authors>
                <author>André Sier</author>

            </authors>
            <description>Part of a-chaos library</description>
            <license> % </license>
            <library>ceammc</library>
            <category>noise</category>
            <keywords>noise</keywords>
            <since>.5</since>
        </meta>
        <info>
            <par>inspired by Paul Bourke, implementation by André Sier  </par>
            <par>---</par>
            <par>lyapunov random attractors</par>
            <par>---</par>
            <par>Paul Bourke's words http://astronomy.swin.edu.au/%7Epbourke/fractals/lyapunov/</par>
            <par>---</par>
            <par>On average 98% of the random selections of (an, bn) result in an infinite series.</par> 
            <par>This is so common because of the range (-2 &lt;= a,b &lt;= 2) for each of the parameters 
            a and b, the number of infinite cases will reduce greatly with a smaller range.</par> 
            <par>About 1% were point attractors, and about 0.5% were periodic basins of attraction.</par>
            <par>===</par>
            <par>xn+1 = a0 + a1 xn + a2 xn2 + a3 xn yn + a4 yn + a5 yn2</par>
            <par>yn+1 = b0 + b1 xn + b2 xn2 + b3 xn yn + b4 yn + b5 yn2</par> 
            <par>===</par>
            <par>see references in object's source code</par>

        </info>
        <arguments>
            <argument name="ARG0" type="float">a value (optional)</argument>
            <argument name="ARG1" type="float">b value (optional)</argument>
            <argument name="ARG2" type="float">x value (optional)</argument>
            <argument name="ARG3" type="float">y value (optional)</argument>
        </arguments>
        <methods>
            <method name="set">
            <param type="float" name="SET" required="true">set to value</param></method>

            <method name="reset">reset state</method>

            <method name="om">
            <param type="int" name="OM" required="true">enables output when cut or fold value is changed</param></method>

            <method name="a">
            <param type="float" name="A" required="true">a value</param></method>
            <method name="b">
            <param type="float" name="B" required="true">b value</param></method>

            <method name="x">
            <param type="float" name="NX" required="true">x value</param></method>
            <method name="y">
            <param type="float" name="NY" required="true">y value</param></method>
            
        </methods>
        <inlets>
            <inlet>
                <xinfo on="bang">output value</xinfo>

                <xinfo on="any">a: a value</xinfo>
                <xinfo on="any">b: b value</xinfo>
                <xinfo on="any">c: c value</xinfo>
                <xinfo on="any">d: d value</xinfo>

                <xinfo on="any">r: r value</xinfo>
                <xinfo on="any">dt: dt value</xinfo>

                <xinfo on="any">om: enables output when any value is changed</xinfo>
            </inlet>
        </inlets>
        <outlets>
            <outlet>main outlet</outlet>
        </outlets>
        <example>
            <pdascii>
<![CDATA[

[T]
|
[metro 50 #metro]


  [T]         [F]
  |           |
  [om $1 #om( [set $1 #set( [reset #reset(

 [F]           [F]
 |             |
 [x $1 #x(     [y $1 #y(  

    [F]       [F]       
    |         |         
    [a $1 #a( [b $1 #b(  

[noise.lyapunov #noise-obj]
|
[ui.display {i=1,o=0}]

[X x:0->noise-obj:0]  
[X y:0->noise-obj:0] 

[X a:0->noise-obj:0]
[X b:0->noise-obj:0]

[X om:0->noise-obj:0]
[X set:0->noise-obj:0]
[X reset:0->noise-obj:0]

[X metro->noise-obj]

]]>
            </pdascii>
        </example>
    </object>
</pddoc>