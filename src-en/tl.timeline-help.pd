#N canvas 0 0 785 555 12;
#X declare -lib ceammc;
#X obj 559 50 cnv 1 206 23 empty empty empty 17 7 0 10 -245760 -1 0;
#X text 559 50 Timeline - event scheduler;
#X obj 1 1 cnv 5 765 40 empty empty tl.timeline 20 20 0 20 -104026
-4096 0;
#X obj 577 11 timeline;
#X obj 660 11 tl.timeline;
#X obj 210 80 cnv 1 555 175 empty empty empty 17 7 0 10 -257983 -1 0;
#X text 215 80 With timeline you can schedule your events and start/pause/stop/move
time;
#X text 215 120 This time formats for event are supported: *clock format*
- HH:MM:SS.MS \, or values like NUMBER UNIT: 10 ms \, 10 msec \, 20
sec \, 30.5s. Note: spaces are ignored.;
#X text 215 175 Empty timeline always contains "end" event \, that
can't be removed. Events are referred by name or by index. Negative
indexes are supported: -1 means last event (not "end" event \, but
last user event);
#X msg 50 283 add 5.4 sec;
#X msg 213 283 add middle 10s;
#X msg 405 283 add last 5s before end;
#X obj 59 312 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0 1;
#X obj 59 341 metro 100;
#X msg 59 370 @current?;
#X msg 98 399 start;
#X msg 174 399 pause;
#X msg 251 399 stop;
#X obj 318 399 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0 1;
#X msg 318 427 @loop \$1;
#X obj 50 456 tl.timeline 20 @loop 1;
#X obj 50 485 prop-> @current, f 20;
#X obj 50 514 sel 0 1 2 begin end;
#X obj 290 514 / 1000;
#X obj 50 543 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 88 543 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 126 543 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 184 543 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 251 543 bng 15 250 50 0 empty empty empty 17 7 0 10 -262144 -1
-1;
#X obj 290 543 sec->str @symbol @ms;
#X symbolatom 290 571 15 0 0 0 - - -;
#X obj 20 610 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 615 cnv 5 90 26 empty empty arguments: 4 10 0 14 -262144
-49933 0;
#X text 110 650 1\.;
#X text 150 650 int;
#X obj 246 651 cnv 1 92 20 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 245 650 LENGTH(sec): timeline length.;
#X obj 20 680 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 685 cnv 5 98 26 empty empty properties: 4 10 0 14 -262144
-49933 0;
#X msg 110 720 @current;
#X text 245 720 (readonly) Get current time. Type: float. Units: ms.
Default value: 0\.;
#X msg 110 762 @events;
#X text 245 762 (readonly) Get list of event names in chronological
order. Type: list. Default value: end.;
#X msg 110 804 @is_running;
#X text 245 804 (readonly) Get if timeline is running. Type: int. Default
value: 0\. Allowed values: 0 \, 1\.;
#X msg 110 846 @length;
#X text 245 846 (readonly) Get timeline length. Type: float. Units:
sec. Default value: 60\.;
#X msg 110 888 @loop;
#X text 245 888 Get/Set loop mode. Type: int. Default value: 0\. Allowed
values: 0 \, 1\.;
#X msg 110 930 @mode;
#X text 245 930 Get/Set timeline mode. If timeline is fixed \, when
reached \, it outputs *end* event and stops after that. Infinite timeline
never stops by itself. Fixed timeline can have @loop property for repeats.
Type: symbol. Default value: fixed. Allowed values: fixed \, inf.;
#X msg 110 1017 @phase;
#X text 245 1017 (readonly) Get current phase in [0-1) range. Type:
float. Default value: 0\. Range: 0\...0\.;
#X msg 110 1059 @size;
#X text 245 1059 (readonly) Get number of events in timeline. Type:
int. Units: sec. Default value: 60\.;
#X obj 20 1111 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 1116 cnv 5 73 26 empty empty methods: 4 10 0 14 -262144
-49933 0;
#X msg 110 1151 add;
#X text 245 1151 add event to timeline. You can use simple syntax like
[add 10.1 sec( to create event with default name \, or use advanced:
[add myEvent 510ms before end(. Arguments are:;
#X obj 255 1204 cnv 1 100 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1204 [NAME=eventN]: event name (if ommitted \, autogenerated
name is used: event1 \, event2 etc.). Type: symbol.;
#X obj 255 1242 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1242 [TIME]: event time: see *info* section. Type: list.;
#X obj 255 1265 cnv 1 77 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1265 [relative]: create relative event before or after
target event. Type: symbol. Allowed values: before \, after.;
#X obj 255 1303 cnv 1 85 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1303 [REL_EVENT]: relative event name. Type: symbol.;
#X msg 110 1328 clear;
#X text 245 1328 remove all timeline events.;
#X msg 110 1355 pause;
#X text 245 1355 stops timeline at current position.;
#X msg 110 1382 remove;
#X text 245 1382 remove event by given index or name. [remove event1(
or [remove 3(. Arguments are:;
#X obj 255 1420 cnv 1 77 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1420 [NAME|IDX]: event name or index. Type: atom.;
#X msg 110 1445 remove_at;
#X text 245 1445 remove event at specified time. Arguments are:;
#X obj 255 1468 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1468 [TIME]: time in supported format. See *info* section.
Type: list.;
#X msg 110 1508 start;
#X text 245 1508 start timeline from current position.;
#X msg 110 1535 stop;
#X text 245 1535 stops timeline and reset current position to the beginning.;
#X msg 110 1562 to_event;
#X text 245 1562 move time to specified event. Arguments are:;
#X obj 255 1585 cnv 1 77 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1585 [NAME|IDX]: event or index. Type: atom.;
#X msg 110 1610 to_time;
#X text 245 1610 move time to time. Arguments are:;
#X obj 255 1633 cnv 1 47 23 empty empty empty 17 7 0 10 -245695 -1 0;
#X text 255 1633 [TIME]: time in supported format. See *info* section.
Type: list.;
#X obj 20 1683 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 1688 cnv 5 64 26 empty empty inlets: 4 10 0 14 -262144
-49933 0;
#X text 110 1689 1\.;
#X text 150 1689 *float*;
#X text 245 1689 control inlet. Non-zero value starts timeline \, zero
- stops.;
#X obj 20 1719 cnv 1 745 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X obj 20 1724 cnv 5 73 26 empty empty outlets: 4 10 0 14 -262144
-49933 0;
#X text 110 1725 1\.;
#X text 245 1725 outputs pair: event index and event name.;
#X obj 10 48 ui.link @title index @url ../index-help.pd;
#X text 51 45 ::;
#X obj 67 48 ui.link @title ceammc @url ceammc-help.pd;
#X text 115 45 ::;
#X obj 131 48 ui.link @title tl @url ceammc.tl-help.pd;
#X obj 1 1775 cnv 5 765 48 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 10 1778 library: ceammc v0.9.0;
#X text 620 1790 see also:;
#X obj 694 1793 ui.link @background_color 0.78431 0.78431 0.78431
@title [tl.cue] @url tl.cue-help.pd;
#N canvas 10 1797 400 290 info 0;
#X obj 1 1 cnv 1 107 287 empty empty empty 17 7 0 10 -183085 -1 0;
#X text 10 10 library:;
#X text 120 10 ceammc;
#X text 10 32 version:;
#X text 120 32 0.9.0;
#X text 10 54 object:;
#X text 120 54 tl.timeline;
#X text 10 76 category:;
#X text 120 76 tl;
#X text 10 98 since:;
#X text 120 98 0.7;
#X text 10 120 authors:;
#X text 120 120 Serge Poltavsky;
#X text 10 142 license:;
#X text 120 142 GPL3 or later;
#X text 10 164 keywords:;
#X text 120 164 timeline;
#X text 10 186 website:;
#X obj 120 189 ui.link @title https://github.com/uliss/pure-data @url
https://github.com/uliss/pure-data;
#X obj 120 208 declare -lib ceammc;
#X obj 120 268 cnv 1 270 1 empty empty empty 17 7 0 10 -203890 -1 0;
#X text 120 268 generated by pddoc;
#X restore 10 1797 pd info;
#X connect 12 0 13 0;
#X connect 13 0 14 0;
#X connect 18 0 19 0;
#X connect 14 0 20 0;
#X connect 15 0 20 0;
#X connect 16 0 20 0;
#X connect 17 0 20 0;
#X connect 19 0 20 0;
#X connect 20 0 21 0;
#X connect 21 0 22 0;
#X connect 21 1 23 0;
#X connect 22 0 24 0;
#X connect 22 1 25 0;
#X connect 22 2 26 0;
#X connect 22 3 27 0;
#X connect 22 4 28 0;
#X connect 23 0 29 0;
#X connect 29 0 30 0;
#X connect 9 0 20 0;
#X connect 10 0 20 0;
#X connect 11 0 20 0;